[gcode_macro G29]                                                               # Bed Levelling (Automatic)
gcode:
    {% if printer.toolhead.homed_axes != "xyz" %} G28 {% endif %}               # home if not homed
    BED_MESH_CALIBRATE
    G0 X0 Y0 F6000

[gcode_macro PROBE_CALIBRATE]                                                   # Calibrate Z-offset
rename_existing: BASE_PROBE_CALIBRATE
gcode:
    {% if printer.toolhead.homed_axes != "xyz" %} G28 {% endif %}               # home if not homed
    BASE_PROBE_CALIBRATE

[gcode_macro PARK]
gcode:
    {% set x_park = params.X|default(printer.toolhead.axis_minimum.x)|float %}
    {% set y_park = params.Y|default(printer.toolhead.axis_minimum.y)|float %}
    {% set z_park = params.Z|default(10)|float + printer.toolhead.position.z|float %}
    {% set x_max = printer.toolhead.axis_maximum.x|float %}
    {% set y_max = printer.toolhead.axis_maximum.y|float %}
    {% set z_max = printer.toolhead.axis_maximum.z|float %}
    {% if x_park > x_max %}
        {% set x_park = x_max %}
    {% endif %}
    {% if y_park > y_max %}
        {% set y_park = y_max %}
    {% endif %}
    {% if z_park > z_max %}
        {% set z_park = z_max %}
    {% endif %}
    SAVE_GCODE_STATE NAME=PARK_STATE
    {% if printer.toolhead.homed_axes != "xyz" %} G28 {% endif %}               # home if not homed
    G90                                                                         # absolute positioning
    G0 Z{z_park} F600 
    G0 X{x_park} Y{y_park} F6000
    RESTORE_GCODE_STATE name=PARK_STATE

[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: BASE_PAUSE
gcode:
    {% set E = printer["gcode_macro START_PRINT"].retract|float %}
    SAVE_GCODE_STATE NAME=PAUSE_STATE
    BASE_PAUSE
    {% if printer.extruder.can_extrude|lower == 'true' %}
        G91
        G1 E-{E} F2100                                                          # retract
        G90
    {% else %}
        {action_respond_info("Extruder is not hot enough")}
    {% endif %}
    PARK

[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: BASE_RESUME
gcode:
    {% set E = printer["gcode_macro START_PRINT"].retract|float %}
    {% if 'VELOCITY' in params|upper %}
        {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
    {%else %}
        {% set get_params = "" %}
    {% endif %}
    {% if printer.extruder.can_extrude|lower == 'true' %}
        G91
        G1 E{E} F2100
        G90
    {% else %}
        {action_respond_info("Extruder is not hot enough")}
    {% endif %}  
    RESTORE_GCODE_STATE NAME=PAUSE_STATE MOVE=1
    BASE_RESUME {get_params}

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: BASE_CANCEL_PRINT
gcode:
    {% set E = printer["gcode_macro START_PRINT"].retract|float %}
    CLEAR_PAUSE
    TURN_OFF_HEATERS
    M107                                                                        # turn off fan
    {% if printer.extruder.can_extrude|lower == 'true' %}
        G91                                                                     # relative positioning
        G1 E-{E} F2100                                                          # retract
        G0 Z2 F600                                                              # raise Z
        G90                                                                     # absolute positioning
    {% else %}
        {action_respond_info("Extruder is not hot enough")}
    {% endif %}
    SDCARD_RESET_FILE
    BASE_CANCEL_PRINT
    PARK Z=30
    M84                                                                         # turn off all motors

[gcode_macro SAVE_UPDATES]
description: Run SAVE_CONFIG if there are updates that it may persist to disk
gcode:
    {% if printer.configfile.save_config_pending %}
        M118 Saving and restarting now
        G4 P2000                                                                # wait 2 seconds
        SAVE_CONFIG
    {% endif %}

[gcode_macro BEEP]
gcode:
    {% set S = params.S|default(1000)|int %}                                    # frequency in Hz
    {% set P = params.P|default(100)|int %}                                     # duration in milliseconds
    SET_PIN PIN=_BEEPER_pin VALUE=0.5 CYCLE_TIME={ 1.0/S if S > 0 else 1 }
    G4 P{P}
    SET_PIN PIN=_BEEPER_pin VALUE=0